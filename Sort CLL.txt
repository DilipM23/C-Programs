//Program to sort the elements of Cll

#include<stdio.h>
#include<stdlib.h>

struct node
{
    int info;
    struct node * link;
};

typedef struct node * NODE;

//Function to allocate memory
NODE getnode()
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("Memory is not available\n");
        exit(0);
    }
    return x;
}

//Function to insert elements at the front of the CLL
NODE insert_front(NODE last,int elem)
{
    NODE temp;
    temp=getnode();
    temp->info=elem;
    temp->link=NULL;
    if(last==NULL)
    {
        last=temp;
        last->link=temp;
        return last;
    }
    temp->link=last->link;
    last->link=temp;
    return last;
}

//Function to delete the elements at the front of the CLL
NODE delete_front(NODE last)
{
    NODE first;
    if(last==NULL)
    {
        printf("CLL is empty\n");
        return NULL;
    }
    if(last->link==last)
    {
        printf("Deleted element is %d\n",last->info);
        free(last);
        return NULL;
    }
    first=last->link;
    printf("Deleted element is %d\n",first->info);
    last->link=first->link;
    free(first);
    return last;
}

//Function to display the elements of CLL
void display(NODE last)
{
    if(last==NULL)
    {
        printf("CLL is empty\n");
        return;
    }
    NODE first=last->link;
    printf("Displaying the elements of CLL\n");
    while(first!=last)
    {
        printf("%d\t",first->info);
        first=first->link;
    }
    printf("%d\t",first->info);
    printf("\n");
    return;
}

//Function to count the number of nodes
int count_node(NODE last)
{
    int count=1;
    if(last==NULL)
        return 0;
    NODE cur=last->link;
    while(cur!=last)
    {
        count++;
        cur=cur->link;
    }
    return count;
}

//Function to sort the elements of CLL
void sort(NODE last,int count)
{
    int i,j;
    if(last==NULL)
    {
        printf("No elements in CLL to sort\n");
        return;
    }
    NODE prev=NULL,next=NULL;
    for(i=0;i<count-1;i++)
    {
	  prev=last->link;
        next=prev->link;
        for(j=0;j<count-i-1;j++)
        {
            if(prev->info>next->info)
            {
                int elem=prev->info;
                prev->info=next->info;
                next->info=elem;
            }
            prev=prev->link;
            next=next->link;  
        }
    }
    
}

int main()
{
    NODE last=NULL;
    int ch,elem,count;
    while(1)
    {
        printf("\n\nEnter 1 to insert front\n2-delete front\n3-display\n4-Count Nodes\n5-sort\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                    printf("Enter the element to be inserted\n");
                    scanf("%d",&elem);
                    last=insert_front(last,elem);
                    break;
            case 2:
                    last=delete_front(last);
                    break;
            case 3:
                    display(last);
                    break;
            case 4:
                    count=count_node(last);
                    printf("Numer of nodes in CLL is %d\n",count);
                    break;
            case 5:
                    sort(last,count);
                    printf("Called sort\n");
                    break;
            default:
                    printf("Invalid choice\n");
                    exit(0);
        }
    }
    return 0;
}
